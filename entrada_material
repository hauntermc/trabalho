import sys
import uuid
from datetime import datetime
from PyQt5.QtWidgets import (QWidget, QLineEdit, QLabel, QPushButton, QMessageBox, QVBoxLayout, QScrollArea,
                             QHBoxLayout, QGridLayout, QFrame, QComboBox, QSizePolicy, QFormLayout, QTableWidget,
                             QTableWidgetItem, QHeaderView, QStackedWidget, QCheckBox, QDialog, QApplication)
from PyQt5.QtCore import Qt, pyqtSlot, QLocale
from PyQt5.QtGui import QColor, QFont, QDoubleValidator
from PyQt5.QtWidgets import QGraphicsDropShadowEffect
from banco_de_dados import EntradaProduto, Material, Estoque
from database_config import session_scope
from telas.tela_base import TelaBaseComESC
from sessao_usuario import SessaoUsuario
from telas.tela_selecao_documento import TelaSelecaoDocumento


class TelaEntradaMaterial(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle('Registro de Entrada de Material')
        self.resize(800, 600)
        self.setMinimumSize(600, 400)
        self.tipo_documento = None
        self.numero_documento = None
        self.materiais = []

        if not self.selecionar_documento():
            return

        self.init_ui()
        self.showMaximized()

    def selecionar_documento(self):
        dialog = TelaSelecaoDocumento(self)
        dialog.documento_selecionado.connect(self.set_documento)
        if dialog.exec_() == QDialog.Accepted:
            return True
        return False

    def set_documento(self, tipo, numero):
        self.tipo_documento = tipo
        self.numero_documento = numero

    def init_ui(self):
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(20)

        # Título e informações do documento
        title_label = QLabel("Registro de Entrada de Material")
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet("font-size: 24px; font-weight: bold; color: #0D47A1;")
        main_layout.addWidget(title_label)

        documento_label = QLabel(f"Documento: {self.tipo_documento} - {self.numero_documento}")
        documento_label.setAlignment(Qt.AlignCenter)
        documento_label.setStyleSheet("font-size: 16px; color: #455A64;")
        main_layout.addWidget(documento_label)

        # Frame para o formulário
        form_frame = QFrame()
        form_frame.setObjectName("formFrame")
        form_layout = QFormLayout(form_frame)
        form_layout.setLabelAlignment(Qt.AlignRight)
        form_layout.setFormAlignment(Qt.AlignLeft | Qt.AlignTop)
        form_layout.setHorizontalSpacing(20)
        form_layout.setVerticalSpacing(15)

        # Campos do formulário
        self.codigo_input = QLineEdit()
        self.codigo_input.setPlaceholderText("Digite o código do material")
        self.codigo_input.textChanged.connect(self.buscar_material_por_codigo)
        form_layout.addRow(QLabel('Código:'), self.codigo_input)

        self.produto_label = QLabel()
        self.produto_label.setStyleSheet("background-color: #f0f0f0; padding: 5px; border: 1px solid #d0d0d0; border-radius: 3px;")
        form_layout.addRow(QLabel('Produto:'), self.produto_label)

        self.unidade_medida_label = QLabel()
        self.unidade_medida_label.setStyleSheet("background-color: #f0f0f0; padding: 5px; border: 1px solid #d0d0d0; border-radius: 3px;")
        form_layout.addRow(QLabel('Unidade de Medida:'), self.unidade_medida_label)

        self.quantidade_input = QLineEdit()
        self.quantidade_input.setPlaceholderText("Quantidade")
        locale = QLocale(QLocale.Portuguese, QLocale.Brazil)
        validator = QDoubleValidator(0.0, 1000000.0, 2, self.quantidade_input)
        validator.setLocale(locale)
        self.quantidade_input.setValidator(validator)
        form_layout.addRow(QLabel('Quantidade:'), self.quantidade_input)

        self.observacao_input = QLineEdit()
        self.observacao_input.setPlaceholderText("Digite uma observação (opcional)")
        form_layout.addRow(QLabel('Observação:'), self.observacao_input)

        # Botão de adicionar material
        self.add_button = QPushButton('Adicionar Material')
        self.add_button.clicked.connect(self.adicionar_material)
        form_layout.addRow(self.add_button)

        main_layout.addWidget(form_frame)

        # Tabela de materiais adicionados
        self.tabela_materiais = QTableWidget()
        self.tabela_materiais.setColumnCount(5)
        self.tabela_materiais.setHorizontalHeaderLabels(['Código', 'Produto', 'Quantidade', 'Unidade', 'Ações'])
        self.tabela_materiais.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        main_layout.addWidget(self.tabela_materiais)

        # Botão de salvar
        self.save_button = QPushButton('Salvar Entrada')
        self.save_button.clicked.connect(self.salvar_entrada)
        main_layout.addWidget(self.save_button, alignment=Qt.AlignCenter)

        self.aplicar_estilo()


    @pyqtSlot(str)
    def on_numero_documento_changed(self, text):
        if text:
            sender = self.sender()
            sender.setReadOnly(True)
            if sender == self.numero_nf_input:
                self.desbloquear_nf_button.show()
            else:
                self.desbloquear_sm_button.show()

    def desbloquear_numero_documento(self):
        current_widget = self.stacked_widget.currentWidget()
        if current_widget == self.stacked_widget.widget(0):  # Página NF
            self.numero_nf_input.setReadOnly(False)
            self.numero_nf_input.setFocus()
            self.desbloquear_nf_button.hide()
        else:  # Página SM
            self.numero_sm_input.setReadOnly(False)
            self.numero_sm_input.setFocus()
            self.desbloquear_sm_button.hide()

    def toggle_os_input(self, state):
        if not SessaoUsuario.is_admin():
            QMessageBox.warning(self, "Acesso Negado", "Apenas administradores podem usar a opção de Ordem de Serviço.")
            self.os_checkbox.setChecked(False)
            return

        if state == Qt.Checked:
            self.os_input.show()
            self.os_input.setProperty("class", "checked")
            self.tipo_documento_widget.hide()
        else:
            self.os_input.hide()
            self.os_input.setProperty("class", "")
            self.tipo_documento_widget.show()
        self.os_input.style().unpolish(self.os_input)
        self.os_input.style().polish(self.os_input)

    def aplicar_estilo(self):
        estilo = """
            QWidget {
                background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, 
                                                  stop:0 #e0e0e0, stop:1 #bdbdbd);
                color: #37474f;
                font-family: 'Roboto', sans-serif;
            }
            QLabel {
                background: none;
                border: none;
                padding: 0;
                margin: 0;
                font-size: 14px;
                font-weight: bold;
                color: #37474f;
            }
            QLineEdit, QComboBox {
                background-color: rgba(255, 255, 255, 0.8);
                border: 1px solid #78909c;
                border-radius: 6px;
                padding: 8px;
                font-size: 13px;
                color: #37474f;
            }
            QLineEdit:focus, QComboBox:focus {
                border: 2px solid #546e7a;
            }
            QPushButton {
                background-color: #546e7a;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #607d8b;
            }
            QTableWidget {
                background-color: rgba(255, 255, 255, 0.8);
                border: 1px solid #78909c;
                border-radius: 6px;
                color: #37474f;
                font-size: 13px;
                padding: 5px;
            }
            QTableWidget::item:selected {
                background-color: #90a4ae;
                color: white;
            }
            QFrame#formFrame {
                background: rgba(255, 255, 255, 0.2);
                border-radius: 8px;
                padding: 10px;
            }
            QLineEdit[placeholder="Digite o número da OS"],
            QLineEdit[placeholder="Digite uma observação (opcional)"] {
                background-color: rgba(255, 255, 255, 0.8);
                border: 1px solid #78909c;
                border-radius: 6px;
                padding: 8px;
                font-size: 13px;
                color: #37474f;
            }
            QCheckBox {
                spacing: 5px;
            }
            QCheckBox::indicator {
                width: 18px;
                height: 18px;
                border: 2px solid #78909c;
                border-radius: 3px;
                background-color: white;
            }
            QCheckBox::indicator:unchecked {
                border: 2px solid #78909c;
            }
            QCheckBox::indicator:checked {
                border: 2px solid #1976D2;
                background-color: #2196F3;
            }
            QCheckBox::indicator:checked::after {
                content: '✓';
                color: white;
                font-size: 14px;
                position: absolute;
                top: -2px;
                left: 3px;
            }
            QLineEdit[class="checked"] {
                padding-left: 25px;
            }
            QLineEdit[class="checked"]::before {
                content: '✓';
                color: #2196F3;
                font-size: 16px;
                position: absolute;
                left: 8px;
                top: 6px;
            }
        """
        self.setStyleSheet(estilo)

        # Adicionar sombra ao frame do formulário
        form_frame = self.findChild(QFrame, "formFrame")
        if form_frame:
            shadow = QGraphicsDropShadowEffect()
            shadow.setBlurRadius(15)
            shadow.setColor(QColor(0, 0, 0, 40))
            shadow.setOffset(0, 5)
            form_frame.setGraphicsEffect(shadow)

    def on_tipo_documento_changed(self, index):
        self.stacked_widget.setCurrentIndex(index - 1)

    def buscar_material_por_codigo(self):
        codigo = self.codigo_input.text().strip()
        if codigo:
            with session_scope() as session:
                material = session.query(Material).filter(Material.id == codigo).first()
                if material:
                    # Criar um dicionário com os dados do material
                    material_dict = {
                        'id': material.id,
                        'nome': material.nome,
                        'descricao': material.descricao,
                        'tipo': material.tipo,
                        'codigo': material.codigo,
                        'ativo': material.ativo,
                        'unidade_medida': material.unidade_medida
                    }
                    self.produto_label.setText(material_dict['nome'])
                    self.unidade_medida_label.setText(material_dict['unidade_medida'])
                else:
                    self.produto_label.setText("Produto não encontrado")
                    self.unidade_medida_label.setText("")
        else:
            self.produto_label.setText("")
            self.unidade_medida_label.setText("")


    def adicionar_material(self):
        codigo = self.codigo_input.text().strip()
        produto_nome = self.produto_label.text()
        quantidade_str = self.quantidade_input.text().strip().replace(',', '.')
        unidade_medida = self.unidade_medida_label.text()

        if not codigo or produto_nome == "Produto não encontrado" or not quantidade_str or not unidade_medida:
            QMessageBox.warning(self, "Aviso", "Preencha todos os campos corretamente.")
            return

        try:
            quantidade = float(quantidade_str)
        except ValueError:
            QMessageBox.warning(self, "Aviso",
                                "Quantidade inválida. Use apenas números e vírgula ou ponto como separador decimal.")
            return

        with session_scope() as session:
            produto = session.query(Material).filter_by(id=codigo).first()
            if produto:
                produto_dict = {
                    'id': produto.id,
                    'nome': produto.nome,
                    'descricao': produto.descricao,
                    'tipo': produto.tipo,
                    'codigo': produto.codigo,
                    'ativo': produto.ativo,
                    'unidade_medida': produto.unidade_medida
                }
            else:
                QMessageBox.warning(self, "Aviso", "Produto não encontrado.")
                return

        material_existente = next(
            (m for m in self.materiais if m['id'] == codigo), None)

        if material_existente:
            material_existente['quantidade'] += quantidade
        else:
            self.materiais.append({
                'codigo': codigo,
                'produto': produto_dict['nome'],
                'quantidade': quantidade,
                'unidade_medida': produto_dict['unidade_medida'],
                'id': codigo
            })

        self.atualizar_tabela()
        self.limpar_campos_material()

    def atualizar_tabela(self):
        self.tabela_materiais.setRowCount(0)
        self.tabela_materiais.setColumnCount(5)
        self.tabela_materiais.setHorizontalHeaderLabels(['Código', 'Produto', 'Quantidade', 'Unidade', 'Ações'])

        for idx, material in enumerate(self.materiais):
            self.tabela_materiais.insertRow(idx)
            self.tabela_materiais.setItem(idx, 0, QTableWidgetItem(material['codigo']))
            self.tabela_materiais.setItem(idx, 1, QTableWidgetItem(material['produto']))
            self.tabela_materiais.setItem(idx, 2, QTableWidgetItem(str(material['quantidade'])))
            self.tabela_materiais.setItem(idx, 3, QTableWidgetItem(material['unidade_medida']))
            remover_button = QPushButton('Remover')
            remover_button.setStyleSheet("""
                QPushButton {
                    background-color: #f44336;
                    color: white;
                    border: none;
                    padding: 5px 10px;
                    border-radius: 4px;
                }
                QPushButton:hover {
                    background-color: #d32f2f;
                }
            """)
            remover_button.clicked.connect(lambda _, row=idx: self.remover_material(row))
            self.tabela_materiais.setCellWidget(idx, 4, remover_button)

    def remover_material(self, row):
        if 0 <= row < len(self.materiais):
            del self.materiais[row]
            self.atualizar_tabela()

    def limpar_campos_material(self):
        self.codigo_input.clear()
        self.produto_label.clear()  # Limpa o label do produto
        self.quantidade_input.clear()
        self.unidade_medida_combo.setCurrentIndex(0)

    def validar_entrada(self):
        erros = []

        if self.os_checkbox.isChecked():
            if not SessaoUsuario.is_admin():
                erros.append("Apenas administradores podem registrar entradas com Ordem de Serviço.")
            else:
                os_numero = self.os_input.text().strip()
                if not os_numero:
                    erros.append("Preencha o número da Ordem de Serviço.")
                elif not os_numero.isdigit():
                    erros.append("O número da OS deve conter apenas dígitos.")
        else:
            # Validar tipo de documento
            tipo_documento = self.tipo_documento_combo.currentText()
            if tipo_documento == "Selecione o tipo":
                erros.append("Selecione um tipo de documento válido.")

            # Validar número do documento
            numero_documento = (self.numero_nf_input.text() if self.tipo_documento_combo.currentIndex() == 1 else
                                self.numero_sm_input.text())
            if not numero_documento:
                erros.append("Preencha o número do documento.")
            elif tipo_documento == "Nota Fiscal" and not numero_documento.isdigit():
                erros.append("O número da Nota Fiscal deve conter apenas dígitos.")

        # Validar OS (se preenchido)
        os_numero = self.os_input.text().strip()
        if os_numero and not os_numero.isdigit():
            erros.append("O número da OS deve conter apenas dígitos.")

        # Validar materiais
        if not self.materiais:
            erros.append("Adicione pelo menos um material antes de salvar.")
        else:
            for material in self.materiais:
                if material['quantidade'] <= 0:
                    erros.append(f"A quantidade para o material '{material['produto']}' deve ser maior que zero.")

        # Validar quantidade total
        quantidade_total = sum(material['quantidade'] for material in self.materiais)
        if quantidade_total > 1000000:  # Exemplo de limite máximo
            erros.append("A quantidade total de materiais excede o limite permitido.")

        return erros

    def salvar_entrada(self):
        try:
            for material in self.materiais:
                try:
                    produto_id = int(material['id'])
                except ValueError:
                    raise ValueError(f"ID do produto inválido: {material['id']}. Deve ser um número inteiro.")

                with session_scope() as session:
                    produto = session.query(Material).get(produto_id)
                    if not produto:
                        raise ValueError(f"Produto com ID {produto_id} não encontrado no banco de dados.")

                    entrada = EntradaProduto(
                        tipo_documento=self.tipo_documento,
                        numero_documento=self.numero_documento,
                        produto_id=produto_id,
                        quantidade=material['quantidade'],
                        unidade_medida=material['unidade_medida'],
                        data_entrada=datetime.now(),
                        observacao=self.observacao_input.text().strip() or None
                    )
                    session.add(entrada)

                    estoque = session.query(Estoque).filter_by(material_id=produto_id).first()
                    if estoque:
                        estoque.quantidade += material['quantidade']
                    else:
                        novo_estoque = Estoque(
                            material_id=produto_id,
                            quantidade=material['quantidade'],
                            valor_minimo=0,
                            status='Normal',
                            unidade_medida=material['unidade_medida']
                        )
                        session.add(novo_estoque)

                    session.commit()

            QMessageBox.information(self, "Sucesso", "Entrada registrada com sucesso!")
            self.accept()
        except ValueError as ve:
            QMessageBox.critical(self, "Erro", f"Erro de valor: {str(ve)}")
        except Exception as e:
            QMessageBox.critical(self, "Erro", f"Erro ao salvar entrada: {str(e)}")
            print(f"Erro detalhado: {e}")
            import traceback
            print(traceback.format_exc())

    def limpar_todos_campos(self):
        self.limpar_campos_material()
        self.materiais.clear()
        self.atualizar_tabela()
        self.os_checkbox.setChecked(False)
        self.os_input.clear()
        self.tipo_documento_combo.setCurrentIndex(0)
        self.numero_nf_input.clear()
        self.numero_sm_input.clear()
        self.observacao_input.clear()
        self.numero_nf_input.setReadOnly(False)
        self.numero_sm_input.setReadOnly(False)
        self.desbloquear_nf_button.hide()
        self.desbloquear_sm_button.hide()

    def closeEvent(self, event):
        reply = QMessageBox.question(self, 'Confirmação',
                                     "Tem certeza que deseja sair? Os dados não salvos serão perdidos.",
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()
